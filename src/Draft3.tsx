/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 src/draft3.glb --transform --types
Files: src/draft3.glb [1.99MB] > draft3-transformed.glb [38.95KB] (98%)
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube578: THREE.Mesh;
    Cube: THREE.Mesh;
    Cube001: THREE.Mesh;
  };
  materials: {
    ["Material.835"]: THREE.MeshPhysicalMaterial;
    LED: THREE.MeshStandardMaterial;
    Material: THREE.MeshPhysicalMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    process.env.PUBLIC_URL + "/draft3-transformed.glb",
  ) as GLTFResult;

  const model = useRef<THREE.Group>(null);
  useFrame((state, delta) => {
    if (!model.current) {
      return;
    }

    // model.current.rotation.y += 0.01;
  });

  return (
    <group {...props} dispose={null} ref={model}>
      <instancedMesh
        args={[nodes.Cube578.geometry, materials["Material.835"], 1368]}
        // @ts-ignore
        instanceMatrix={nodes.Cube578.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.Cube.geometry, materials.LED, 96]}
        // @ts-ignore
        instanceMatrix={nodes.Cube.instanceMatrix}
      />
      <instancedMesh
        args={[nodes.Cube001.geometry, materials.Material, 72]}
        // @ts-ignore
        instanceMatrix={nodes.Cube001.instanceMatrix}
      />
    </group>
  );
}

useGLTF.preload("/draft3-transformed.glb");
